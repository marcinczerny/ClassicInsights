@baseUrl = http://localhost:3000/api

### GET all notes (default parameters)
# Expected response includes relationship_type for each entity in the note
# Example response:
# {
#   "data": [{
#     "id": "uuid",
#     "title": "Note Title",
#     "content": "...",
#     "entities": [{
#       "id": "entity-uuid",
#       "name": "Entity Name",
#       "type": "person",
#       "description": "...",
#       "relationship_type": "criticizes"  <-- NEW FIELD
#     }]
#   }],
#   "pagination": { ... }
# }
GET {{baseUrl}}/notes

### GET notes with pagination
GET {{baseUrl}}/notes?page=2&limit=5

### GET notes with sorting
GET {{baseUrl}}/notes?sort=title&order=asc

### GET notes with search term
GET {{baseUrl}}/notes?search=your_search_term

### GET notes filtered by entities (provide comma-separated UUIDs)
GET {{baseUrl}}/notes?entities=uuid1,uuid2

### GET notes with combined parameters
GET {{baseUrl}}/notes?page=1&limit=10&sort=updated_at&order=desc&search=important

###
# @name createNote
POST {{baseUrl}}/notes
Content-Type: application/json

{
    "title": "New Note from HTTP file 2",
    "content": "This is the content of the new note. - to be deleted"
}

###
# @name createNoteWithEntities
# LEGACY FORMAT - deprecated but still supported
POST {{baseUrl}}/notes
Content-Type: application/json

{
    "title": "Note with Entities (Legacy Format)",
    "content": "This note uses the deprecated entity_ids format. All relationships will default to 'is_related_to'.",
    "entity_ids": ["ea230e96-2789-4f25-b0ed-c815bb3b4326"]
}

###
# @name createNoteWithEntitiesAndRelationshipTypes
POST {{baseUrl}}/notes
Content-Type: application/json

{
    "title": "Note with Typed Relationships",
    "content": "This note demonstrates typed relationships between notes and entities.",
    "entities": [
        {
            "entity_id": "ea230e96-2789-4f25-b0ed-c815bb3b4326",
            "relationship_type": "criticizes"
        },
        {
            "entity_id": "12977a74-1785-4a47-8d8f-8f5029d736c5",
            "relationship_type": "expands_on"
        }
    ]
}

###
# @name createNoteWithDefaultRelationshipType
# When relationship_type is omitted, it defaults to 'is_related_to'
POST {{baseUrl}}/notes
Content-Type: application/json

{
    "title": "Note with Default Relationship Type",
    "content": "This entity association will default to 'is_related_to'.",
    "entities": [
        {
            "entity_id": "ea230e96-2789-4f25-b0ed-c815bb3b4326"
        }
    ]
}

###
# @name createNoteWithMultipleRelationshipTypes
# Demonstrates various relationship types
POST {{baseUrl}}/notes
Content-Type: application/json

{
    "title": "Note Demonstrating All Relationship Types",
    "content": "This note shows different ways entities can relate to notes. I extended the note a little bit longer so ai suggestion has something to work on with. That should be it",
    "entities": [
        {
            "entity_id": "d1d71fec-6fd7-4530-9795-0178c7df2247",
            "relationship_type": "criticizes"
        },
        {
            "entity_id": "27db413a-93d2-4000-937b-f64a1306065b",
            "relationship_type": "is_student_of"
        }
    ]
}

###
# @name createNoteInvalid
# Should fail - missing required title field
POST {{baseUrl}}/notes
Content-Type: application/json

{
    "content": "This note has no title and should fail."
}

###
# @name createNoteWithInvalidRelationshipType
# Should fail - invalid relationship_type value
POST {{baseUrl}}/notes
Content-Type: application/json

{
    "title": "Note with Invalid Relationship Type",
    "content": "This should fail validation.",
    "entities": [
        {
            "entity_id": "ea230e96-2789-4f25-b0ed-c815bb3b4326",
            "relationship_type": "invalid_type"
        }
    ]
}

###
# @name createNoteWithBothFormats
# Should fail - cannot provide both 'entities' and 'entity_ids'
POST {{baseUrl}}/notes
Content-Type: application/json

{
    "title": "Note with Both Formats",
    "content": "This should fail validation - cannot mix formats.",
    "entities": [
        {
            "entity_id": "d1d71fec-6fd7-4530-9795-0178c7df2247",
            "relationship_type": "criticizes"
        }
    ],
    "entity_ids": ["9de7f17e-a3c2-4b88-94c1-9746c2b9e2b8"]
}

###
# @name createDuplicateNote
POST {{baseUrl}}/notes
Content-Type: application/json

{
    "title": "New Note from HTTP file"
}

###

# @name getNotes
GET {{{{baseUrl}}}}/api/notes?page=1&limit=5&sort=title&order=asc

###
# ============================================================================
# NOTE-SPECIFIC ENDPOINTS
# ============================================================================

@noteId = f6541be6-ef08-43bc-9d96-4ba20f6be97a
@entityId = d1d71fec-6fd7-4530-9795-0178c7df2247
@anotherEntityId = 27db413a-93d2-4000-937b-f64a1306065b

### GET a single note by ID
# @name getNoteById
# Expected response includes relationship_type for each entity
# Example response:
# {
#   "id": "uuid",
#   "title": "Note Title",
#   "content": "...",
#   "created_at": "...",
#   "updated_at": "...",
#   "entities": [{
#     "id": "entity-uuid",
#     "name": "Plato",
#     "type": "person",
#     "description": "Ancient Greek philosopher",
#     "relationship_type": "criticizes"  <-- Shows how this note relates to the entity
#   }]
# }
GET {{baseUrl}}/notes/{{noteId}}

### PATCH (update) a note by ID (legacy format with entity_ids)
# @name updateNote
PATCH {{baseUrl}}/notes/27b51ab0-1360-4740-a52a-53e15c4b1c5b
Content-Type: application/json

{
    "title": "Updated Note Title via PATCH",
    "content": "This is the updated content for the note.",
    "entity_ids": ["{{entityId}}"]
}

### PATCH (update) a note with typed relationships
# @name updateNoteWithTypedRelationships
PATCH {{baseUrl}}/notes/{{noteId}}
Content-Type: application/json

{
    "title": "Updated Note with Typed Relationships",
    "content": "This demonstrates updating a note with relationship types.",
    "entities": [
        {
            "entity_id": "{{entityId}}",
            "relationship_type": "influenced_by"
        },
        {
            "entity_id": "12977a74-1785-4a47-8d8f-8f5029d736c5",
            "relationship_type": "is_example_of"
        }
    ]
}

### PATCH (update) only the title of a note
# @name updateNoteTitle
PATCH {{baseUrl}}/notes/{{noteId}}
Content-Type: application/json

{
    "title": "Updated Note Title Only"
}

### PATCH (update) note - replace relationships with new types
# @name updateNoteReplaceRelationships
PATCH {{baseUrl}}/notes/{{noteId}}
Content-Type: application/json

{
    "entities": [
        {
            "entity_id": "{{entityId}}",
            "relationship_type": "expands_on"
        }
    ]
}

### PATCH (update) note - clear all entity relationships
# @name updateNoteClearRelationships
PATCH {{baseUrl}}/notes/{{noteId}}
Content-Type: application/json

{
    "title": "Note with No Entities",
    "entities": []
}

### DELETE a note by ID
# @name deleteNote
DELETE {{baseUrl}}/notes/{{noteId}}

### POST (add) an entity to a note (default relationship type)
# @name addEntityToNote
POST {{baseUrl}}/notes/{{noteId}}/entities
Content-Type: application/json

{
    "entity_id": "{{entityId}}"
}

### POST (add) an entity to a note with specific relationship type
# @name addEntityToNoteWithType
POST {{baseUrl}}/notes/{{noteId}}/entities
Content-Type: application/json

{
    "entity_id": "{{entityId}}",
    "relationship_type": "criticizes"
}

### POST (add) entity with 'influenced_by' relationship
# @name addEntityInfluencedBy
POST {{baseUrl}}/notes/{{noteId}}/entities
Content-Type: application/json

{
    "entity_id": "{{anotherEntityId}}",
    "relationship_type": "influenced_by"
}

### POST (add) entity with 'is_example_of' relationship
# @name addEntityIsExampleOf
POST {{baseUrl}}/notes/{{noteId}}/entities
Content-Type: application/json

{
    "entity_id": "{{entityId}}",
    "relationship_type": "is_example_of"
}

### POST (add) duplicate entity (should fail with 409)
# @name addDuplicateEntity
POST {{baseUrl}}/notes/{{noteId}}/entities
Content-Type: application/json

{
    "entity_id": "{{entityId}}",
    "relationship_type": "criticizes"
}

### POST (add) entity with invalid relationship type (should fail)
# @name addEntityInvalidType
POST {{baseUrl}}/notes/{{noteId}}/entities
Content-Type: application/json

{
    "entity_id": "{{entityId}}",
    "relationship_type": "not_a_valid_type"
}

### DELETE an entity from a note
# @name removeEntityFromNote
DELETE {{baseUrl}}/notes/{{noteId}}/entities/{{entityId}}

###
# ============================================================================
# ENTITY MANAGEMENT ENDPOINTS
# ============================================================================

@createdEntityId = ea230e96-2789-4f25-b0ed-c815bb3b4326

### GET all entities (default parameters)
# @name getEntities
GET {{baseUrl}}/entities

### GET entities with search and sort
# @name getEntitiesFiltered
GET {{baseUrl}}/entities?search=tale&sort=name&order=asc

### GET entities filtered by type
# @name getEntitiesByType
GET {{baseUrl}}/entities?type=person

### POST (create) a new entity
# @name createEntity
POST {{baseUrl}}/entities
Content-Type: application/json

{
    "name": "Platon",
    "type": "person",
    "description": "Starożytny filozof grecki, uczeń Sokratesa."
}

### POST (create) a new entity
# @name createEntity2
POST {{baseUrl}}/entities
Content-Type: application/json

{
    "name": "Sokrates",
    "type": "person",
    "description": "Starożytny filozof grecki, twórca metody sokratejskiej."
}

### POST (create) an invalid entity (missing name)
# @name createEntityInvalid
POST {{baseUrl}}/entities
Content-Type: application/json

{
    "type": "work",
    "description": "This should fail validation."
}

### GET a single entity by ID
# @name getEntityById
# Expected response includes relationship_type for each note
# Example response:
# {
#   "id": "uuid",
#   "name": "Plato",
#   "type": "person",
#   "description": "...",
#   "created_at": "...",
#   "updated_at": "...",
#   "notes": [{
#     "id": "note-uuid",
#     "title": "Note Title",
#     "created_at": "...",
#     "relationship_type": "criticizes"  <-- Shows how this note relates to the entity
#   }]
# }
GET {{baseUrl}}/entities/{{createdEntityId}}

### PATCH (update) an entity by ID
# @name updateEntity
PATCH {{baseUrl}}/entities/{{createdEntityId}}
Content-Type: application/json

{
    "description": "Uczeń Sokratesa i nauczyciel Arystotelesa."
}

### DELETE an entity by ID
# @name deleteEntity
DELETE {{baseUrl}}/entities/9de7f17e-a3c2-4b88-94c1-9746c2b8
###
# ============================================================================
# RELATIONSHIP MANAGEMENT ENDPOINTS
# ============================================================================

@sourceEntityId = d1d71fec-6fd7-4530-9795-0178c7df2247
@targetEntityId = 27db413a-93d2-4000-937b-f64a1306065b
@createdRelationshipId = 

### POST (create) a new relationship
# @name createRelationship
POST {{baseUrl}}/relationships
Content-Type: application/json

{
    "source_entity_id": "{{sourceEntityId}}",
    "target_entity_id": "{{targetEntityId}}",
    "type": "influenced_by"
}

### POST (create) a self-referencing relationship (should fail)
# @name createSelfRelationship
POST {{baseUrl}}/relationships
Content-Type: application/json

{
    "source_entity_id": "{{sourceEntityId}}",
    "target_entity_id": "{{sourceEntityId}}",
    "type": "influenced_by"
}

### GET all relationships for the user (default pagination)
# @name getRelationships
GET {{baseUrl}}/relationships

### GET relationships with pagination
# @name getRelationshipsPaginated
GET {{baseUrl}}/relationships?page=1&limit=10

### GET relationships with filtering
# @name getRelationshipsFiltered
GET {{baseUrl}}/relationships?source_entity_id={{sourceEntityId}}&type=influenced_by

### GET relationships with filtering and pagination
# @name getRelationshipsFilteredPaginated
GET {{baseUrl}}/relationships?source_entity_id={{sourceEntityId}}&page=1&limit=5

### PATCH (update) a relationship's type
# @name updateRelationship
PATCH {{baseUrl}}/relationships/{{createdRelationshipId}}
Content-Type: application/json

{
    "type": "criticizes"
}

### DELETE a relationship by ID
# @name deleteRelationship
DELETE {{baseUrl}}/relationships/{{createdRelationshipId}}

### POST (create) a duplicate relationship (should fail)
# @name createDuplicateRelationship
POST {{baseUrl}}/relationships
Content-Type: application/json

{
    "source_entity_id": "{{sourceEntityId}}",
    "target_entity_id": "{{targetEntityId}}",
    "type": "influenced_by"
}

### POST (create) relationship with non-existent entity (should fail)
# @name createRelationshipNonExistent
POST {{baseUrl}}/relationships
Content-Type: application/json

{
    "source_entity_id": "00000000-0000-0000-0000-000000000000",
    "target_entity_id": "{{targetEntityId}}",
    "type": "is_student_of"
}

### POST (create) relationship with invalid type (should fail)
# @name createRelationshipInvalidType
POST {{baseUrl}}/relationships
Content-Type: application/json

{
    "source_entity_id": "{{sourceEntityId}}",
    "target_entity_id": "{{targetEntityId}}",
    "type": "invalid_type"
}

### GET relationships second page
# @name getRelationshipsSecondPage
GET {{baseUrl}}/relationships?page=2&limit=5

### GET relationships filtered by target entity
# @name getRelationshipsByTarget
GET {{baseUrl}}/relationships?target_entity_id={{targetEntityId}}

### PATCH relationship with invalid ID (should fail)
# @name updateRelationshipInvalidId
PATCH {{baseUrl}}/relationships/00000000-0000-0000-0000-000000000000
Content-Type: application/json

{
    "type": "criticizes"
}

### DELETE relationship with invalid ID (should fail)
# @name deleteRelationshipInvalidId
DELETE {{baseUrl}}/relationships/00000000-0000-0000-0000-000000000000

###
# ============================================================================
# RELATIONSHIP TYPE TESTING - Comprehensive Test Suite
# ============================================================================
# Tests for all available relationship_type enum values

@testNoteId = f6541be6-ef08-43bc-9d96-4ba20f6be97a
@testEntityId1 = ea230e96-2789-4f25-b0ed-c815bb3b4326
@testEntityId2 = 9de7f17e-a3c2-4b88-94c1-9746c2b9e2b8

### Create note with 'criticizes' relationship
# @name testCriticizes
POST {{baseUrl}}/notes
Content-Type: application/json

{
    "title": "Test: Criticizes Relationship",
    "content": "This note criticizes the entity.",
    "entities": [
        {
            "entity_id": "{{testEntityId1}}",
            "relationship_type": "criticizes"
        }
    ]
}

### Create note with 'is_student_of' relationship
# @name testIsStudentOf
POST {{baseUrl}}/notes
Content-Type: application/json

{
    "title": "Test: Is Student Of Relationship",
    "content": "This note represents a student-teacher relationship.",
    "entities": [
        {
            "entity_id": "{{testEntityId1}}",
            "relationship_type": "is_student_of"
        }
    ]
}

### Create note with 'expands_on' relationship
# @name testExpandsOn
POST {{baseUrl}}/notes
Content-Type: application/json

{
    "title": "Test: Expands On Relationship",
    "content": "This note expands on the entity's ideas.",
    "entities": [
        {
            "entity_id": "{{testEntityId1}}",
            "relationship_type": "expands_on"
        }
    ]
}

### Create note with 'influenced_by' relationship
# @name testInfluencedBy
POST {{baseUrl}}/notes
Content-Type: application/json

{
    "title": "Test: Influenced By Relationship",
    "content": "This note shows influence from the entity.",
    "entities": [
        {
            "entity_id": "{{testEntityId1}}",
            "relationship_type": "influenced_by"
        }
    ]
}

### Create note with 'is_example_of' relationship
# @name testIsExampleOf
POST {{baseUrl}}/notes
Content-Type: application/json

{
    "title": "Test: Is Example Of Relationship",
    "content": "This note is an example of the entity's concept.",
    "entities": [
        {
            "entity_id": "{{testEntityId1}}",
            "relationship_type": "is_example_of"
        }
    ]
}

### Create note with 'is_related_to' relationship (default)
# @name testIsRelatedTo
POST {{baseUrl}}/notes
Content-Type: application/json

{
    "title": "Test: Is Related To Relationship",
    "content": "This note has a general relationship with the entity.",
    "entities": [
        {
            "entity_id": "{{testEntityId1}}",
            "relationship_type": "is_related_to"
        }
    ]
}

### Create note with mixed relationship types
# @name testMixedRelationships
POST {{baseUrl}}/notes
Content-Type: application/json

{
    "title": "Test: Multiple Different Relationships",
    "content": "This note demonstrates multiple entities with different relationship types.",
    "entities": [
        {
            "entity_id": "{{testEntityId1}}",
            "relationship_type": "criticizes"
        },
        {
            "entity_id": "{{testEntityId2}}",
            "relationship_type": "influenced_by"
        }
    ]
}

### Add entity with each relationship type to existing note
# @name testAddCriticizes
POST {{baseUrl}}/notes/{{testNoteId}}/entities
Content-Type: application/json

{
    "entity_id": "{{testEntityId1}}",
    "relationship_type": "criticizes"
}

### Add entity with 'expands_on' type
# @name testAddExpandsOn
POST {{baseUrl}}/notes/{{testNoteId}}/entities
Content-Type: application/json

{
    "entity_id": "{{testEntityId2}}",
    "relationship_type": "expands_on"
}

### Update note - change relationship types for existing entities
# @name testUpdateChangeTypes
PATCH {{baseUrl}}/notes/{{testNoteId}}
Content-Type: application/json

{
    "entities": [
        {
            "entity_id": "{{testEntityId1}}",
            "relationship_type": "is_student_of"
        },
        {
            "entity_id": "{{testEntityId2}}",
            "relationship_type": "influenced_by"
        }
    ]
}

### Edge case: Empty entities array (removes all relationships)
# @name testEmptyEntitiesArray
POST {{baseUrl}}/notes
Content-Type: application/json

{
    "title": "Note with No Entities",
    "content": "This note starts with no entity relationships.",
    "entities": []
}

### Edge case: Entity without relationship_type (should default to 'is_related_to')
# @name testOmittedRelationshipType
POST {{baseUrl}}/notes
Content-Type: application/json

{
    "title": "Note with Omitted Relationship Type",
    "content": "The relationship type should default to 'is_related_to'.",
    "entities": [
        {
            "entity_id": "{{testEntityId1}}"
        }
    ]
}

### Edge case: Mix of specified and omitted relationship types
# @name testMixedSpecifiedOmitted
POST {{baseUrl}}/notes
Content-Type: application/json

{
    "title": "Note with Mixed Relationship Type Specification",
    "content": "Some entities have explicit types, others default.",
    "entities": [
        {
            "entity_id": "{{testEntityId1}}",
            "relationship_type": "criticizes"
        },
        {
            "entity_id": "{{testEntityId2}}"
        }
    ]
}

###
# ============================================================================
# PROFILE MANAGEMENT ENDPOINTS
# ============================================================================

### GET current user's profile
# @name getProfile
GET {{baseUrl}}/profile

### PATCH (update) profile - accept AI data processing
# @name updateProfileAccept
PATCH {{baseUrl}}/profile
Content-Type: application/json

{
    "has_agreed_to_ai_data_processing": true
}

### PATCH (update) profile - reject AI data processing
# @name updateProfileReject
PATCH {{baseUrl}}/profile
Content-Type: application/json

{
    "has_agreed_to_ai_data_processing": false
}

### PATCH profile with empty body (should fail)
# @name updateProfileEmpty
PATCH {{baseUrl}}/profile
Content-Type: application/json

{
}

### PATCH profile with invalid type (should fail)
# @name updateProfileInvalidType
PATCH {{baseUrl}}/profile
Content-Type: application/json

{
    "has_agreed_to_ai_data_processing": "yes"
}

### DELETE current user's account (DESTRUCTIVE - use with caution!)
# @name deleteProfile
# WARNING: This will permanently delete the account and all associated data
# DELETE {{baseUrl}}/profile

###
# ============================================================================
# AI SUGGESTIONS ENDPOINTS
# ============================================================================

@aiNoteId = f6541be6-ef08-43bc-9d96-4ba20f6be97a
@suggestionId = 

### POST (trigger) AI analysis for a note
# @name analyzeNote
# Assumes user has agreed to AI data processing.
# Will return mock suggestions for now.
POST {{baseUrl}}/notes/{{aiNoteId}}/analyze

### POST (trigger) AI analysis for a note belonging to another user (should fail)
# @name analyzeNoteForbidden
# Assuming the note ID belongs to a different user
POST {{baseUrl}}/notes/00000000-0000-0000-0000-000000000000/analyze

### POST (trigger) AI analysis for non-existent note (should fail)
# @name analyzeNoteNotFound
POST {{baseUrl}}/notes/11111111-1111-1111-1111-111111111111/analyze

### GET all suggestions for a note
# @name getSuggestions
GET {{baseUrl}}/notes/{{aiNoteId}}/suggestions

### GET pending suggestions for a note
# @name getPendingSuggestions
GET {{baseUrl}}/notes/{{aiNoteId}}/suggestions?status=pending

### GET accepted suggestions for a note
# @name getAcceptedSuggestions
GET {{baseUrl}}/notes/{{aiNoteId}}/suggestions?status=accepted

### PATCH (accept) a suggestion
# @name acceptSuggestion
PATCH {{baseUrl}}/suggestions/{{suggestionId}}
Content-Type: application/json

{
    "status": "accepted"
}

### PATCH (reject) a suggestion
# @name rejectSuggestion
PATCH {{baseUrl}}/suggestions/{{suggestionId}}
Content-Type: application/json

{
    "status": "rejected"
}

### PATCH a suggestion with an invalid status (should fail)
# @name updateSuggestionInvalidStatus
PATCH {{baseUrl}}/suggestions/{{suggestionId}}
Content-Type: application/json

{
    "status": "maybe"
}

### PATCH a non-existent suggestion (should fail)
# @name updateSuggestionNotFound
PATCH {{baseUrl}}/suggestions/00000000-0000-0000-0000-000000000000
Content-Type: application/json

{
    "status": "accepted"
}

###
# ============================================================================
# THOUGHT GRAPH ENDPOINTS
# ============================================================================

@graphEntityId = 27db413a-93d2-4000-937b-f64a1306065b
@graphNoteId = a02ce9bf-cc05-49fb-af5d-1a88a5c1afc0

### GET graph centered on entity (default levels=2)
# @name getGraphEntityDefault
# Expected response includes nodes (entities and notes) and edges (relationships and note-entity associations)
# Example response:
# {
#   "nodes": [
#     {
#       "id": "uuid",
#       "type": "entity",
#       "name": "Plato",
#       "entity_type": "person",
#       "description": "Ancient Greek philosopher",
#       "created_at": "..."
#     },
#     {
#       "id": "uuid",
#       "type": "note",
#       "name": "Note Title",
#       "note_preview": "First 100 chars...",
#       "created_at": "..."
#     }
#   ],
#   "edges": [
#     {
#       "id": "uuid",
#       "source_id": "uuid",
#       "target_id": "uuid",
#       "type": "criticizes",
#       "created_at": "..."
#     }
#   ]
# }
GET {{baseUrl}}/graph?center_id={{graphEntityId}}&center_type=entity

### GET graph centered on entity with levels=1
# @name getGraphEntityLevel1
GET {{baseUrl}}/graph?center_id={{graphEntityId}}&center_type=entity&levels=1

### GET graph centered on entity with levels=3 (maximum depth)
# @name getGraphEntityLevel3
GET {{baseUrl}}/graph?center_id={{graphEntityId}}&center_type=entity&levels=3

### GET graph centered on note (default levels=2)
# @name getGraphNoteDefault
GET {{baseUrl}}/graph?center_id={{graphNoteId}}&center_type=note

### GET graph centered on note with levels=1
# @name getGraphNoteLevel1
GET {{baseUrl}}/graph?center_id={{graphNoteId}}&center_type=note&levels=1

### GET graph centered on note with levels=3 (maximum depth)
# @name getGraphNoteLevel3
GET {{baseUrl}}/graph?center_id={{graphNoteId}}&center_type=note&levels=3

### GET graph - missing center_id (should fail with 400)
# @name getGraphMissingCenterId
GET {{baseUrl}}/graph?center_type=entity

### GET graph - missing center_type (should fail with 400)
# @name getGraphMissingCenterType
GET {{baseUrl}}/graph?center_id={{graphEntityId}}

### GET graph - invalid center_id format (should fail with 400)
# @name getGraphInvalidCenterId
GET {{baseUrl}}/graph?center_id=not-a-uuid&center_type=entity

### GET graph - invalid center_type value (should fail with 400)
# @name getGraphInvalidCenterType
GET {{baseUrl}}/graph?center_id={{graphEntityId}}&center_type=invalid_type

### GET graph - levels below minimum (should fail with 400)
# @name getGraphLevelsBelowMin
GET {{baseUrl}}/graph?center_id={{graphEntityId}}&center_type=entity&levels=0

### GET graph - levels above maximum (should fail with 400)
# @name getGraphLevelsAboveMax
GET {{baseUrl}}/graph?center_id={{graphEntityId}}&center_type=entity&levels=4

### GET graph - levels not an integer (should fail with 400)
# @name getGraphLevelsNotInteger
GET {{baseUrl}}/graph?center_id={{graphEntityId}}&center_type=entity&levels=2.5

### GET graph - non-existent entity (should fail with 404)
# @name getGraphEntityNotFound
GET {{baseUrl}}/graph?center_id=11111111-1111-1111-1111-111111111111&center_type=entity

### GET graph - non-existent note (should fail with 404)
# @name getGraphNoteNotFound
GET {{baseUrl}}/graph?center_id=11111111-1111-1111-1111-111111111111&center_type=note

### GET graph - entity belonging to another user (should fail with 403)
# @name getGraphEntityForbidden
# NOTE: This test requires multi-user setup with test data from another user
# GET {{baseUrl}}/graph?center_id=other-user-entity-id&center_type=entity

### GET graph - note belonging to another user (should fail with 403)
# @name getGraphNoteForbidden
# NOTE: This test requires multi-user setup with test data from another user
# GET {{baseUrl}}/graph?center_id=other-user-note-id&center_type=note

###
# ============================================================================
# STATISTICS ENDPOINTS
# ============================================================================

### GET statistics - all time (default)
# @name getStatisticsAll
# Expected response includes comprehensive statistics for notes, entities, relationships, and AI suggestions
# Example response:
# {
#   "notes": {
#     "total": 42,
#     "created_this_period": 42  // same as total when period=all
#   },
#   "entities": {
#     "total": 28,
#     "by_type": {
#       "person": 10,
#       "work": 8,
#       "idea": 6,
#       "epoch": 2,
#       "school": 1,
#       "system": 1,
#       "other": 0
#     }
#   },
#   "relationships": {
#     "total": 35,
#     "by_type": {
#       "criticizes": 5,
#       "is_student_of": 8,
#       "expands_on": 12,
#       "influenced_by": 6,
#       "is_example_of": 3,
#       "is_related_to": 1
#     }
#   },
#   "ai_suggestions": {
#     "total_generated": 150,
#     "total_accepted": 112,
#     "total_rejected": 38,
#     "acceptance_rate": 0.75,
#     "by_type": {
#       "quote": {
#         "generated": 60,
#         "accepted": 50,
#         "acceptance_rate": 0.83
#       },
#       "summary": {
#         "generated": 40,
#         "accepted": 30,
#         "acceptance_rate": 0.75
#       },
#       "new_entity": {
#         "generated": 30,
#         "accepted": 20,
#         "acceptance_rate": 0.67
#       },
#       "existing_entity_link": {
#         "generated": 20,
#         "accepted": 12,
#         "acceptance_rate": 0.60
#       }
#     }
#   }
# }
GET {{baseUrl}}/statistics

### GET statistics - default (no period parameter)
# @name getStatisticsDefault
# Should behave the same as period=all
GET {{baseUrl}}/statistics

### GET statistics - last week
# @name getStatisticsWeek
# Should return total counts and items created in the last 7 days
GET {{baseUrl}}/statistics?period=week

### GET statistics - last month
# @name getStatisticsMonth
# Should return total counts and items created in the last 30 days
GET {{baseUrl}}/statistics?period=month

### GET statistics - last year
# @name getStatisticsYear
# Should return total counts and items created in the last 365 days
GET {{baseUrl}}/statistics?period=year

### GET statistics - with explicit period=all
# @name getStatisticsExplicitAll
# Should return the same as default
GET {{baseUrl}}/statistics?period=all

### GET statistics - invalid period parameter (should fail with 400)
# @name getStatisticsInvalidPeriod
GET {{baseUrl}}/statistics?period=invalid_period

### GET statistics - another invalid period (should fail with 400)
# @name getStatisticsInvalidPeriod2
GET {{baseUrl}}/statistics?period=day

### GET statistics - numeric period (should fail with 400)
# @name getStatisticsNumericPeriod
GET {{baseUrl}}/statistics?period=7

###